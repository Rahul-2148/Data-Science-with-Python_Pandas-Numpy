
📊 Matplotlib (MATLAB Plot Library) - Complete Notes

Matplotlib is a powerful and widely used **data visualization** library in Python, designed to produce **high-quality 2D plots**, similar to MATLAB. It works well with **NumPy and Pandas** for plotting structured data.

🔹 1. What is Matplotlib?
---------------------------
📌 Matplotlib is a plotting library for the Python programming language.
📌 It helps you create line plots, bar charts, scatter plots, histograms, heatmaps, pie charts, etc.
📌 It is highly customizable and supports interactive plots in Jupyter Notebooks and GUIs.

🔹 2. Installing Matplotlib
----------------------------
```bash
pip install matplotlib
```
Or via Anaconda:
```bash
conda install matplotlib
```

🔹 3. Basic Plotting with Pyplot
---------------------------------
```python
import matplotlib.pyplot as plt

x = [1, 2, 3, 4]
y = [10, 20, 25, 30]

plt.plot(x, y)
plt.title("Basic Line Plot")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")
plt.grid(True)
plt.show()
```

🔹 4. Common Plot Types
-------------------------
✅ **Line Plot** - `plt.plot()`  
✅ **Bar Chart** - `plt.bar()`  
✅ **Histogram** - `plt.hist()`  
✅ **Scatter Plot** - `plt.scatter()`  
✅ **Pie Chart** - `plt.pie()`  
✅ **Box Plot** - `plt.boxplot()`  
✅ **Stacked Plot** - `plt.stackplot()`  
✅ **Area Plot**, **Heatmap**, and more

🔹 5. Customizing Plots 🎨
-----------------------------
```python
plt.plot(x, y, color='red', linestyle='--', marker='o', label='Data')
plt.legend()
plt.title("Customized Plot")
plt.grid(True)
```

✨ Other Customizations:
- `plt.xticks()`, `plt.yticks()`
- `plt.xlim()`, `plt.ylim()`
- Font sizes, tick rotations, figure size

🔹 6. Subplots and Layouts
----------------------------
```python
fig, axs = plt.subplots(2, 2, figsize=(8, 6))
axs[0, 0].plot(x, y)
axs[0, 1].bar(x, y)
axs[1, 0].scatter(x, y)
axs[1, 1].hist(y)
plt.tight_layout()
plt.show()
```

🔹 7. Annotating Plots
------------------------
```python
plt.plot(x, y)
plt.annotate('Peak', xy=(3, 25), xytext=(2, 26),
             arrowprops=dict(facecolor='black', shrink=0.05))
```

🔹 8. Advanced Plotting Techniques 🌐
-------------------------------------
✅ **Multiple Axes in One Plot**:
```python
fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.plot(x, y, 'g-')
ax2.plot(x, [v/2 for v in y], 'b-')
```

✅ **Heatmap using imshow()**:
```python
import numpy as np
data = np.random.rand(5, 5)
plt.imshow(data, cmap='hot', interpolation='nearest')
plt.colorbar()
```

✅ **Stacked Bar Plot**:
```python
A = [3, 5, 1]
B = [2, 3, 4]
x = ['A', 'B', 'C']
plt.bar(x, A, label='A')
plt.bar(x, B, bottom=A, label='B')
plt.legend()
```

🔹 9. Saving Figures
----------------------
```python
plt.savefig('plot.png', dpi=300)
```

🔹 10. Integration with Pandas
-------------------------------
```python
import pandas as pd
df = pd.DataFrame({'x': [1, 2, 3], 'y': [10, 20, 30]})
df.plot(x='x', y='y', kind='line')
plt.show()
```

🔹 11. Interactive and 3D Plots (with mpl_toolkits)
----------------------------------------------------
✅ For 3D plotting:
```python
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter([1,2,3], [4,5,6], [7,8,9])
plt.show()
```

🔹 12. Real-world Usage
-------------------------
📈 Stock & financial charts  
📊 Business dashboards  
🧠 AI model evaluation (confusion matrix, ROC curve)  
🧪 Scientific data plots  
📍 Maps & spatial data (with Basemap or Cartopy)

🔹 Summary ✨
---------------
Matplotlib is your **go-to library for visualizing data** in Python.
✅ Easy to learn  
✅ Fully customizable  
✅ Compatible with NumPy, Pandas, and Jupyter  
✅ Works for both beginners and pros

🧠 Bonus Tip: Use **Seaborn** on top of Matplotlib for more beautiful, statistical plots with less code!
